To Do:

x * Graphically print asts
x * Separate ast building code from overall parsing code.  want to put
   a nice frontend on parsing.
x * Textually print asts
x * Pass line numbers through for ast building errors and into ast
   nodes.
x * Add some notation for trace message functions.
x  * Do way better parser error reporting
x    -Line number
x    -Offending token
 * Add productions to ast builder.
    -Add Trace constructions to ast builder
    -Add Shared constructions to ast builder
 * Create test infrastructure for asts
 
 * Need to better-define ReturnableExpression.  Right now, can only
   provide literals and function calls.
 * Resolve a bunch of shift-reduce conflicts labeled in parser.out.


 * During semantic analysis, if have more than one argument in
   funcArgList, check that no arguments are empty.


Notes:
  Ors and Ands have same precedence and are left-associative.

   
Questions:

Annotation for shared data seems off.  Right now, just have one
general CONTROLS annotation.  Can have more nuanced rules, where a
piece of state can only be modified directly in a message response
chain instead of at the outset of response.  Similarly, may want to
make state only writable.  We'll see.

Should ElseIf use camel-case or underscore?  Mechanical Turk it.


Ideas:

Are there any benefits behind reporting syntax errors sequentially,
instead of reporting many at once?  That would be conventional wisdome
to overturn.

Syntax error reporting is hard.  This is because when hit a syntax
error, yacc does not actually report to you which state it can't get
out of (or the deepest state that it can get into before failing).
This is a problem because can't report targetted syntax errors without
parsing for them specifically.  If provide this extra bit of
information, maybe can provide more informative syntax error: "looks
like you may have forgotten a semi-colon", "don't forget a comma
here", etc.  Note that this may fit in with SOSP paper about
configuration error messages.


Require parens for grouping on == and !=. 
Require parens for grouping on or and and?
 
Long-term to do:
 

Incorporate errors into Trace syntax.  Probably put errors at end of
each trace line.  (Ie, for each trace line, no matter where the error
occurs in the trace line, all error handling on each side happens in
one function.)  Use prose keyword, such as "OnError" to deal with
each.  Maybe also provide ability to specify how long to wait until a
message times out.

Presumably, only one trace line can execute at a time.  What is model
for queueing other message lines?


