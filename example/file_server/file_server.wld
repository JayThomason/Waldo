FileServer

Endpoint Client;
Endpoint Server;

Sequences{

    GetSequence: Client.issue_get -> Server.get_response -> Client.process_get_response;

    WriteSequence: Client.issue_write -> Server.write_response;

    DelFileSequence: Client.del_file ->  Server.del_file_response;
    
}


Sequence GetSequence(Text filename,Text default)
{
    // shared for the lifetime of the sequence by both client and
    // server.  
    Text sequence_val;

    /**
      Both filename and default are automatically added as shared
      variables scoped to the lifetime of the sequence.  Note: if they
      were function objects or externals, they could only be used by client.
    */
    Client.issue_get
    {} // nothing to do 
    
    Server.get_response // note no arguments to subsequent calls
    {
        // to handle case where requested file does not exist in map
        if (filename in ext_map)
            sequence_val = ext_map[filename];
        else
            sequence_val = default;
    }
    
    Client.process_get_response
    {
        // contents of file is returned by placing in Client's
        // gotten_val variable.
        gotten_val = sequence_val;
    }
}

Sequence DelFileSequence(Text filename)
{
    Client.del_file
    {}
    
    Server.del_file_response
    {
        ext_map.remove(filename);
    }
}


Sequence WriteSequence(Text filename,Text to_write)
{
    Client.issue_write
    {}

    Server.write_response
    {
        ext_map[filename] = to_write;
    }

    // gets called after transaction has completed
    Server.onComplete
    {
        written_callback(filename,to_write);
    }

}


Client
{
    // used to transfer file contents from message sequence to
    // function that calls that sequence
    Text gotten_val;

    /**
      Initiates GetSequence.  Returns contents of file named
      filename.  If filename does not exist on server, returns default
      instead.
    */
    Public Function get(Text filename,Text default) returns Text
    {
        issue_get(filename,default);
        return gotten_val;
    }

    /**
      Initiates WriteSequence.
    */
    Public Function write(Text filename,Text to_write)
    {
        issue_write(filename,to_write);
    }

    Public Function delete_file(Text filename)
    {
        del_file(filename);
    }

    
}

Server
{
    External Map (from: Text, to: Text) ext_map;
    Function (in: Text, Text; returns: Nothing) written_callback;

    /**
      Constructor method for server.  Note that to_use_map is passed
      in in server.py as external_fs and written_cb is passed in in
      server.py as written_callback (gets called whenever a write
      occurs).
    */
    onCreate(
        External Map(from: Text, to: Text) to_use_map,
        Function (in: Text, Text; returns: Nothing) written_cb)
    {
        // note it is illegal to assign to an external using =
        // this is because of an ambiguity in =.  If we say ext1 =
        // ext2, do we mean, "replace ext1's *value* with ext2's" or
        // "replace ext1 with ext2"?  Use extCopy for the first,
        // extAssign for the second.
        extAssign to_use_map to ext_map;
        
        written_callback = written_cb;
    }

    Public Function append_to_map(Text index, Text val)
    {
        ext_map[index] = val;
    }
}
