/** VERSION 2
  *
  * Simple example: user can start a message stream by calling the public
  * function initiateSend on Ping.  This starts a sequence of 
  * messages that increment counters shared between endpoints.  
*/


PingPong

Endpoint Ping;
Endpoint Pong;


Traces
{
    // specifies order of handlers that will be called
    PingPongSequence : Ping.one -> Pong.two -> Ping.three -> Pong.four;
}


/**** Data shared between both ends */
Shared
{
    // both of these are rarely used in this program.
    Ping Controls Number pingCounter = 0;
    Pong Controls Number pongCounter = 0;
}


/***** MessageSequence section: Any sequence declared in Traces is defined here */
MessageSequence PingPongSequence
{
    // Shared between both endpoint functions.  Only has a lifetime
    // of the message sequence.
    Number numMsgs = 0;

    Ping.one()
    {
        numMsgs = numMsgs + 1;
        pingCounter = pingCounter + 1;
    }
    Pong.two
    {
        numMsgs = numMsgs + 1;   
        pongCounter = pongCounter + 1;
    }
    Ping.three
    {
         numMsgs = numMsgs + 1;
         pingCounter = pingCounter + 1;  
    }
    Pong.four
    {
         numMsgs = numMsgs + 1;       
         pongCounter = pongCounter + 1;  
    }
}


/**** Ping endpoint *********/
Ping
{
    OnCreate ()
    {
        Text printMsg = 'Ping has been created.  ';
        printMsg = printMsg + 'No initialization to  perform.';
        Print(printMsg);
    }
                
    Public Function initiateSend() Returns Nothing
    {
        Print('**** Initiating send ****');
        one();
    }
}


/**** Pong endpoint *********/
Pong
{
    // Nothing required in pong
}
