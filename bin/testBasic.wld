/** VERSION 1
  * 
  * Simple example: user can start a message stream by calling the public
  * function initiateSend on Ping.  This starts a sequence of 
  * messages that increment counters shared between endpoints.  To
  * demonstrate how message exchanges work, keeping track of number of
  * messages sent per message sequence as 'numMsgs' field of a
  * incoming and outgoing messages.
*/


PingPong

Endpoint Ping;
Endpoint Pong;


Traces
{
    // specifies order of handlers that will be called
    Ping.one -> Pong.two -> Ping.three -> Pong.four;
}


/**** Data shared between both ends */
Shared
{
    // Any time hit a message function in ping/pong,
    // update pingCounter/pongCounter.
    Ping Controls Number pingCounter = 0;
    Pong Controls Number pongCounter = 0;
}


/****  Ping endpoint *********/
Ping
{
    OnCreate ()
    {
        Text printMsg = 'Ping has been created.  ';
        printMsg = printMsg + 'No initialization to  perform.';
        Print(printMsg);
    }
        
    Public Function initiateSend() Returns Nothing
    {
        Print('**** Initiating send ****');
        one();
    }

                
    MessageSend one ()
        OutgoingMessage:
        {
            Number numMsgs
        }
    {
        pingCounter = pingCounter + 1;
        
        OutgoingMessage msg = {
          'numMsgs' : 0
        };
            
        Send msg To Pong;
    }

        
    MessageReceive three
        IncomingMessage msg:
        {
            Number numMsgs
        }
        OutgoingMessage:
        {
            Number numMsgs
        }
    {
        pingCounter = pingCounter + 1;

        OutgoingMessage msgResponse = {
          'numMsgs' : msg['numMsgs'] + 1
        };
            
        Send msgResponse To Pong;
    }
}


/****  Pong endpoint *********/
Pong
{
    MessageReceive two
        IncomingMessage msg:
        {
            Number numMsgs
        }
        OutgoingMessage:
        {
            Number numMsgs
        }
    {
        pongCounter = pongCounter + 1;
            
        OutgoingMessage msgResponse = {
          'numMsgs' : msg['numMsgs'] + 1
        };

        Send msgResponse To Ping;
    }

    MessageReceive four
        IncomingMessage msg:
        {
            Number numMsgs
        }
        OutgoingMessage:
        {
            Number numMsgs
        }
   {
        pongCounter = pongCounter + 1;  

        OutgoingMessage msgResponse = {
          'numMsgs' : msg['numMsgs'] + 1
        };
            
        Send msgResponse To Ping;
   }
}
