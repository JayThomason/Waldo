PingPong

/**
  * Simple example: user can start a message stream by calling the public
  * function initiateSend on Ping.  This starts a sequence of three
  * messages that increment counters on both endpoints, printing along the
  * way.
*/


Endpoint Ping;
Endpoint Pong;


Traces
{
        // specifies order of handlers that will be called
         Ping.one -> Pong.two -> Ping.three -> Pong.four;
}


/**** Data shared between both ends */
Shared
{
        //both of these are rarely used in this program.
        Ping Controls Number pingCounter = 0;
        Nothing Controls Number pongCounter = 0;
        
}


/****  New endpoint *********/
Ping
{
        Number responses = 0;
        TrueFalse something;

        OnCreate ()
        {

        }

        
        
        Public Function initiateSend() Returns Nothing
        {
            pongCounter = 20;
            Print('Initiating send ****');
            one();
        }

        
        Public Function getResponses() Returns Number
        {
            Return responses;
        }   
        
        MessageSend one () OutgoingMessage: { Number responses }
        {
            pingCounter = pingCounter + 1;
            OutgoingMessage msg = {
              'responses' : responses
            };
            
            Send msg To Pong;
        }

        
        MessageReceive three
             IncomingMessage msg:
             {
                Number responses
             }
             OutgoingMessage:
             {
                 Number responses
             }
        {
        
            pingCounter = pingCounter + 1;  
            responses = responses + 1;
            OutgoingMessage msgResponse = {
              'responses' : responses
            };


            Print(msg['responses']);
            
            Send msgResponse To Pong;
        }
}


/****  New endpoint *********/
Pong
{
        Number responses = 0;
        
        MessageReceive two
             IncomingMessage msg:
             {
                Number responses
             }
             OutgoingMessage:
             {
                 Number responses
             }
        {
            pongCounter = pongCounter + 1;
            responses = responses + 1;
            OutgoingMessage msgResponse = {
              'responses' : responses
            };


            Print(msg['responses']);
            
            Send msgResponse To Ping;
        }

        MessageReceive four
             IncomingMessage msg:
             {
                Number responses
             }
             OutgoingMessage:
             {
                 Number responses
             }
        {
            pongCounter = pongCounter + 1;  
            responses = responses + 1;
            OutgoingMessage msgResponse = {
              'responses' : responses
            };

            Print(pongCounter);
            Print(msg['responses']);
            
            Send msgResponse To Ping;
        }
}
