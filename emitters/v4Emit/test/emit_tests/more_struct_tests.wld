StructFromEndpoint

Symmetric SideA, SideB;

Sequences{
  Test: SideA.start_test -> SideB.recv_test;
  InputStruct: SideA.start_input_struct -> SideB.recv_input_struct;
}

// Want to ensure that can get a struct from an endpoint call and that can
// serialize and deserialize a struct in a message.

Struct SomeStruct
{
    Number a;
}

Sequence Test(Number num_to_load) returns Struct SomeStruct to_return
{
    SideA.start_test
    {}
    SideB.recv_test
    {
        to_return = get_struct(num_to_load);
    }
}

Sequence InputStruct(Struct SomeStruct input_struct, Number inc1, Number inc2)
    returns Struct SomeStruct to_return
{
  SideA.start_input_struct
  {
      input_struct.a += inc1;
  }
  SideB.recv_input_struct
  {
      input_struct.a += inc2;
      to_return = input_struct;
  }
}



SideA
{
    Public Function input_struct_sequence(Number inc1, Number inc2) returns Number
    {
        Struct SomeStruct ss;
        ss = start_input_struct(ss,inc1,inc2);
        return ss.a;
    }
    
    Public Function get_struct(Number init_val) returns Struct SomeStruct
    {
        Struct SomeStruct s_struct;
        s_struct.a = init_val;
        return s_struct;
    }
    
    Public Function get_struct_from_other_side(
        Endpoint other_side,Number init_val) returns Number
    {
        Struct SomeStruct weirdly_named = other_side.get_struct(init_val);
        return weirdly_named.a;
    }
    

    Public Function get_partner_struct(Number init_val) returns Number
    {
        Struct SomeStruct s_struct = start_test(init_val);
        return s_struct.a;
    }
    
}

